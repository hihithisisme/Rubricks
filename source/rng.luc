module rng (
    input clk,
    input level[8],
    input level_reset,
    output out[3][8]
  ) {
  .clk(clk) { 
    dff rng_state[3];
    edge_detector reset_edge[3] (#RISE(1), #FALL(0));
  }
  
  always {
    out = 3x{{8b0}};
    reset_edge.in = level_reset;
    if(reset_edge.out == 1) rng_state.d = rng_state.q + 1;
    case(rng_state.q){
      0:      
      case(level){
      1: out = c{{8b11100000},{8b10000000},{8b0}};
      2: out = c{{8b10000000},{8b11000000},{8b11000000}};
      3: out = c{{8b00000000},{8b11100000},{8b10000000}};
      4: out = c{{8b11000000},{8b00000000},{8b11000000}};
      5: out = c{{8b00000000},{8b00000000},{8b11000000}};
      6: out = c{{8b11000000},{8b10000000},{8b10000000}};
      7: out = c{{8b11100000},{8b10000000},{8b11000000}};
      8: out = c{{8b11100000},{8b11100000},{8b11100000}};
      9: out = c{{8b11100000},{8b10000000},{8b0}};
      10: out = c{{8b10000000},{8b11000000},{8b11000000}};
      11: out = c{{8b00000000},{8b11100000},{8b10000000}};
      12: out = c{{8b11000000},{8b00000000},{8b11000000}};
      13: out = c{{8b00000000},{8b00000000},{8b11000000}};
      14: out = c{{8b11000000},{8b10000000},{8b10000000}};
      15: out = c{{8b11100000},{8b10000000},{8b11000000}};
      16: out = c{{8b11100000},{8b11100000},{8b11000000}};
      default: out = c{{8b11000000},{8b00000000},{8b11000000}};
      }
        
      1:
      case(level){
      1: out = c{{8b11000000},{8b11000000},{8b00000000}};
      2: out = c{{8b11100000},{8b11000000},{8b11100000}};
      3: out = c{{8b10000000},{8b10000000},{8b11000000}};
      4: out = c{{8b10000000},{8b11000000},{8b11000000}};
      5: out = c{{8b11100000},{8b10000000},{8b11100000}};
      6: out = c{{8b00000000},{8b10000000},{8b11000000}};
      7: out = c{{8b10000000},{8b10000000},{8b11100000}};
      8: out = c{{8b00000000},{8b11000000},{8b10000000}};
      9: out = c{{8b00000000},{8b11100000},{8b10000000}};
      10: out = c{{8b10000000},{8b11100000},{8b11000000}};
      11: out = c{{8b00000000},{8b00000000},{8b10000000}};
      12: out = c{{8b00000000},{8b00000000},{8b11000000}};
      13: out = c{{8b00000000},{8b00000000},{8b10000000}};
      14: out = c{{8b11100000},{8b11000000},{8b11000000}};
      15: out = c{{8b11000000},{8b10000000},{8b11100000}};
      16: out = c{{8b11100000},{8b11100000},{8b00000000}};
      default: out = c{{8b11000000},{8b00000000},{8b11000000}};
      }
        
      2:
      case(level){
      1: out = c{{8b11100000},{8b11100000},{8b11000000}};
      2: out = c{{8b00000000},{8b00000000},{8b10000000}};
      3: out = c{{8b10000000},{8b11100000},{8b10000000}};
      4: out = c{{8b00000000},{8b10000000},{8b10000000}};
      5: out = c{{8b00000000},{8b11000000},{8b11100000}};
      6: out = c{{8b00000000},{8b00000000},{8b11000000}};
      7: out = c{{8b00000000},{8b11100000},{8b11100000}};
      8: out = c{{8b11100000},{8b11000000},{8b10000000}};
      9: out = c{{8b10000000},{8b10000000},{8b11100000}};
      10: out = c{{8b00000000},{8b00000000},{8b00000000}};
      11: out = c{{8b00000000},{8b00000000},{8b00000000}};
      12: out = c{{8b11100000},{8b10000000},{8b10000000}};
      13: out = c{{8b10000000},{8b00000000},{8b00000000}};
      14: out = c{{8b10000000},{8b11000000},{8b00000000}};
      15: out = c{{8b00000000},{8b10000000},{8b00000000}};
      16: out = c{{8b11000000},{8b11100000},{8b11100000}};
      default: out = c{{8b11000000},{8b00000000},{8b11000000}};
      }
        
      3:
      case(level){
      1: out = c{{8b10000000},{8b10000000},{8b00000000}};
      2: out = c{{8b10000000},{8b00000000},{8b11000000}};
      3: out = c{{8b11100000},{8b10000000},{8b10000000}};
      4: out = c{{8b10000000},{8b11000000},{8b00000000}};
      5: out = c{{8b11100000},{8b10000000},{8b11100000}};
      6: out = c{{8b11100000},{8b00000000},{8b10000000}};
      7: out = c{{8b11000000},{8b10000000},{8b11000000}};
      8: out = c{{8b11000000},{8b00000000},{8b00000000}};
      9: out = c{{8b00000000},{8b11000000},{8b10000000}};
      10: out = c{{8b00000000},{8b00000000},{8b00000000}};
      11: out = c{{8b11000000},{8b11000000},{8b10000000}};
      12: out = c{{8b10000000},{8b11000000},{8b11000000}};
      13: out = c{{8b00000000},{8b10000000},{8b11000000}};
      14: out = c{{8b00000000},{8b11000000},{8b11000000}};
      15: out = c{{8b00000000},{8b11000000},{8b11100000}};
      16: out = c{{8b10000000},{8b10000000},{8b10000000}};
      default: out = c{{8b11000000},{8b00000000},{8b11000000}};
      }
        
      4:
      case(level){
      1: out = c{{8b00000000},{8b11100000},{8b00000000}};
      2: out = c{{8b11100000},{8b11000000},{8b11000000}};
      3: out = c{{8b00000000},{8b10000000},{8b11100000}};
      4: out = c{{8b00000000},{8b11000000},{8b11000000}};
      5: out = c{{8b00000000},{8b11100000},{8b00000000}};
      6: out = c{{8b00000000},{8b10000000},{8b11100000}};
      7: out = c{{8b11000000},{8b11000000},{8b00000000}};
      8: out = c{{8b10000000},{8b10000000},{8b10000000}};
      9: out = c{{8b00000000},{8b00000000},{8b11000000}};
      10: out = c{{8b10000000},{8b11100000},{8b11000000}};
      11: out = c{{8b11100000},{8b11000000},{8b00000000}};
      12: out = c{{8b10000000},{8b11000000},{8b00000000}};
      13: out = c{{8b11100000},{8b11100000},{8b00000000}};
      14: out = c{{8b11100000},{8b11000000},{8b10000000}};
      15: out = c{{8b00000000},{8b11100000},{8b11000000}};
      16: out = c{{8b11000000},{8b00000000},{8b00000000}};
      default: out = c{{8b11000000},{8b00000000},{8b11000000}};
      }
        
      5:
      case(level){
      1: out = c{{8b00000000},{8b11100000},{8b11100000}};
      2: out = c{{8b11100000},{8b00000000},{8b11100000}};
      3: out = c{{8b10000000},{8b11000000},{8b11100000}};
      4: out = c{{8b11100000},{8b00000000},{8b00000000}};
      5: out = c{{8b00000000},{8b11100000},{8b11000000}};
      6: out = c{{8b11000000},{8b00000000},{8b10000000}};
      7: out = c{{8b00000000},{8b11100000},{8b10000000}};
      8: out = c{{8b11100000},{8b11000000},{8b10000000}};
      9: out = c{{8b10000000},{8b11000000},{8b11100000}};
      10: out = c{{8b10000000},{8b00000000},{8b11100000}};
      11: out = c{{8b00000000},{8b10000000},{8b11100000}};
      12: out = c{{8b00000000},{8b10000000},{8b11000000}};
      13: out = c{{8b00000000},{8b10000000},{8b11000000}};
      14: out = c{{8b10000000},{8b11000000},{8b11100000}};
      15: out = c{{8b11000000},{8b11100000},{8b11100000}};
      16: out = c{{8b00000000},{8b00000000},{8b00000000}};
      default: out = c{{8b11000000},{8b00000000},{8b11000000}};
      }
        
      6:
      case(level){
      1: out = c{{8b11000000},{8b11100000},{8b11000000}};
      2: out = c{{8b11100000},{8b11100000},{8b11100000}};
      3: out = c{{8b11100000},{8b10000000},{8b10000000}};
      4: out = c{{8b11000000},{8b10000000},{8b00000000}};
      5: out = c{{8b11000000},{8b11000000},{8b11100000}};
      6: out = c{{8b11000000},{8b10000000},{8b11000000}};
      7: out = c{{8b11000000},{8b11100000},{8b10000000}};
      8: out = c{{8b00000000},{8b00000000},{8b11100000}};
      9: out = c{{8b10000000},{8b11000000},{8b00000000}};
      10: out = c{{8b11000000},{8b11000000},{8b10000000}};
      11: out = c{{8b00000000},{8b11100000},{8b11100000}};
      12: out = c{{8b11000000},{8b11100000},{8b10000000}};
      13: out = c{{8b10000000},{8b10000000},{8b00000000}};
      14: out = c{{8b10000000},{8b11100000},{8b11000000}};
      15: out = c{{8b11000000},{8b00000000},{8b10000000}};
      16: out = c{{8b10000000},{8b00000000},{8b11100000}};
      default: out = c{{8b11000000},{8b00000000},{8b11000000}};
      }
        
      7:
      case(level){
      1: out = c{{8b10000000},{8b11100000},{8b11000000}};
      2: out = c{{8b11100000},{8b00000000},{8b11000000}};
      3: out = c{{8b11000000},{8b00000000},{8b11100000}};
      4: out = c{{8b00000000},{8b10000000},{8b11100000}};
      5: out = c{{8b11000000},{8b11000000},{8b10000000}};
      6: out = c{{8b00000000},{8b11100000},{8b11100000}};
      7: out = c{{8b11100000},{8b10000000},{8b11100000}};
      8: out = c{{8b00000000},{8b00000000},{8b11100000}};
      9: out = c{{8b10000000},{8b10000000},{8b10000000}};
      10: out = c{{8b11000000},{8b11000000},{8b11000000}};
      11: out = c{{8b11000000},{8b11000000},{8b10000000}};
      12: out = c{{8b11000000},{8b11000000},{8b00000000}};
      13: out = c{{8b11000000},{8b00000000},{8b11100000}};
      14: out = c{{8b10000000},{8b11000000},{8b00000000}};
      15: out = c{{8b10000000},{8b11100000},{8b00000000}};
      16: out = c{{8b11100000},{8b10000000},{8b00000000}};
      default: out = c{{8b11000000},{8b00000000},{8b11000000}};
      }
    }
  }
}
