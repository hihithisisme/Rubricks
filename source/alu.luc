module alu (
    input alufn[6],
    input a[8],
    input b[8],
    input bsel,
    input bdata[8],
    output out[8],
    output z,
    output v,
    output n    
  ) {
  sig op_b[8];
  alu_adder myAdder;
  alu_bool myBool;
  alu_shift myShift;
  alu_comp myCompare;

  always {
    if(bsel == 0) op_b = b;
    else op_b = bdata;
    myAdder.a = a;
    myAdder.b = op_b;
    myAdder.alufnIn = alufn[1:0];
    myBool.a = a;
    myBool.b = op_b;
    myBool.alufnIn = alufn[3:0];
    myShift.a = a;
    myShift.b = op_b[2:0];
    myShift.alufnIn = alufn[2:0];
    myCompare.a = a;
    myCompare.b = op_b;
    myCompare.alufnIn = alufn[2:1];
    
    
    case(alufn[5:4]){
      2b00: out = myAdder.out;
      2b01: out = myBool.out;
      2b10: out = myShift.out;
      2b11: out = myCompare.out;
      default: out = 0;
    }
    
    z = myAdder.z;
    v = myAdder.v;
    n = myAdder.n;
  }
}
