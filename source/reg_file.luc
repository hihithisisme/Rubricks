module reg_file #(
    ROWS = 8,
    COLS = 6
  )(
    input clk,  // clock
    //input rst,  // reset    
    input ra_address[5],
    input rb_address[5],
    input wa[5],    // address to write to
    input wdsel,    // should be redundant, but just in case
    input wd[8],   // data to be written
    input reset,
    output ra_data[8],
    output rb_data[8]
  ) {
  
  .clk(clk){
    dff regs[24][ROWS]; // 3 registers for each column: (0) rng com given (1) user input (2) SHL of user input; additional col for processing
  }
  
  // PYTHON CODE FOR HARDCODING REGISTERS
  //for i in range(1,4):
  //for j in range(5):
  //  print("{}{}: ra_data = regs.q[{}][{}];".format(i,j,i,j))

  always {
    if(reset == 1) {
    regs.d = 24x{{8b0}};
    }
  
    ra_data = regs.q[ra_address];
    rb_data = regs.q[rb_address];
    if(wdsel == 1) regs.d[wa] = wd;
    
}
}