module control (
    input clk,  // clock
    input start_button,
    input user_button[6],
    input z,
    input level[4],
    input game_reset,
    output reg_wa[5],
    output led_wa[3],
    output wdsel[2],
    output alufn[6],
    output ra_address[5],
    output rb_address[5],
    output bdata[8],
    output bsel,
    output reset,
    output level_up,
    output level_reset,
    output colour1[24],
    output colour0[24],
    output test[8]
  ) {
  const BOOL_B = 6b011010;
  const BOOL_AND = 6b011000;
  const SHL = 6b100000;
  const ADD = 6b000000;
  const SUB = 6b000001;
  const TIME_GIVEN = 40;
  .clk(clk) {
    fsm state = {START_GAME,LEVEL_UP,RNG,
                USERIN_SHL,USERIN_ADD,USERIN_DISPLAY,
                ANIMATE_SHL,ANIMATE_ADD,    // ANIMATE_SHL is entry into animate cycle
                COLLIDE,COLLIDE_CHECK,ANIMATE_DISPLAY,  
                ANSWER_CHECK,LEVEL_CLEARED,CLEAR};
    dff button_pressed[4];    // keeps track of the button pressed 
    dff animate[3];           // ensures that the blocks only drop a max of 5 times
    dff player_ingame[2];
    dff col_repeat[3];
    dff repeat[3];
    dff countdown[3];

    counter timer (#SIZE(8), #DIV(24), #TOP(255));            // keeps track of the time available 
  }
  hardcode_screen myScreen;
  rng myRNG;
  always {
    timer.rst = 0;
    myRNG.clk = clk;
    myRNG.rst = 0;
    myRNG.gen = 0;
    reg_wa = d31;
    led_wa = 3;
    wdsel = 2b0;      // wdsel[0] refers to LED memory; wdsel[1] refers to reg_file
    alufn = 6b000000;
    ra_address = d31;
    rb_address = d31;
    bdata = 8b0;
    bsel = 0;
    reset = 0;
    level_up = 0;
    level_reset = 0;
    test = 8b0;
    colour0 = Colour.BLUE;
    colour1 = Colour.RED;
    myScreen.screen = 8b11111111;
    
    
    /* RUN DOWN of arrangement: 
    each col has 4 registers and 1 button attached to it
    Registers are arranged as such:
       col_repeat.q * 3 + 0: rng
       col_repeat.q * 3 + 1: user input
       col_repeat.q * 3 + 2: store what might appear on led display
       col_repeat.q + 18: for collision check
    */
    case(state.q){
      state.START_GAME:
        player_ingame.d = 2b11;
        level_reset = 1;
        level_up = 1;
        reset = 1;
        countdown.d = 3;
        timer.rst = 1;
        if(start_button == 1) state.d = state.RNG;
        
      state.LEVEL_UP:
        level_up = 1;
        if(game_reset == 1) state.d = state.START_GAME;

        // reg_wa = col_repeat.q * 3;
        led_wa = col_repeat.q;
        wdsel[1] = 0;
        if(col_repeat.q <= 2) wdsel[0] = 1 & player_ingame.q[0];    // for any state that writes to led_memory will have this so that we don't display anything for players who alr lost
        else wdsel[0] = 1 & player_ingame.q[1];
        alufn = BOOL_B;
        myScreen.screen = countdown.q;
        bdata = myScreen.out[col_repeat.q];
        bsel = 1;
        if(col_repeat.q < 5) {                                      // for any state that goes through all cols, this repeats the code till all cols have been passed through
          col_repeat.d = col_repeat.q + 1;
        } else {
        col_repeat.d = 0;
        if(countdown.q == 1) {
          countdown.d = 3;
          state.d = state.RNG;
        } else { if(timer.value >= 8b111){
          timer.rst = 1;
          countdown.d = countdown.q - 1;
          }
        }}
    
      state.RNG:          // can consider for the extremely hard difficulty to switch the rng values in another reg; coded to be "reg_wa = 3 + hard;" hard = 0 or 10
        myRNG.gen = 1;
        reg_wa = col_repeat.q * 3;
        led_wa = col_repeat.q;
        wdsel[1] = 1;
        if(col_repeat.q <= 2) wdsel[0] = 1 & player_ingame.q[0];    // for any state that writes to led_memory will have this so that we don't display anything for players who alr lost
        else wdsel[0] = 1 & player_ingame.q[1];
        alufn = BOOL_B;
        if(col_repeat.q <= 2) bdata = myRNG.out[col_repeat.q];      // ensure that both players draw from the same number
        else bdata = myRNG.out[col_repeat.q - 3];
        bsel = 1;
        if(col_repeat.q < 5) {                                      // for any state that goes through all cols, this repeats the code till all cols have been passed through
          col_repeat.d = col_repeat.q + 1;
        } else {
        col_repeat.d = 0;
        timer.rst = 1;
        state.d = state.USERIN_DISPLAY;
        }
        
      state.USERIN_DISPLAY:
        myRNG.gen = 0;
        if(timer.value >= (TIME_GIVEN - level*3)) {          // increasing difficulty
          col_repeat.d = 0;
          state.d = state.ANIMATE_SHL;    
        } else if(start_button == 1) {
          col_repeat.d = 0;
          state.d = state.ANIMATE_SHL;
        }
        else {
        if((timer.value >= (TIME_GIVEN - level*3 - 10)) & (timer.value[0] == 0)) {    // starts blinking once there's 10 units of time left
          colour0 = Colour.BLACK;
          colour1 = Colour.BLACK;
        }
        //reg_wa = 
        led_wa = col_repeat.q;
        wdsel[1] = 0;
        if(col_repeat.q <= 2) wdsel[0] = 1 & player_ingame.q[0];
        else wdsel[0] = 1 & player_ingame.q[1];
        alufn = ADD;
        //bdata = 
        //bsel = 
        ra_address = col_repeat.q * 3;          // rng
        rb_address = col_repeat.q * 3 + 1;      // user input
        if(user_button[0] == 1) {
            col_repeat.d = 0;
            button_pressed.d = 0;
            state.d = state.USERIN_SHL;
          }
          if(user_button[1] == 1) {
            col_repeat.d = 0;
            button_pressed.d = 1;
            state.d = state.USERIN_SHL;
          }
          if(user_button[2] == 1) {
            col_repeat.d = 0;
            button_pressed.d = 2;
            state.d = state.USERIN_SHL;
          }
          if(user_button[3] == 1) {    
            col_repeat.d = 0;
            button_pressed.d = 3;
            state.d = state.USERIN_SHL;
          }
          if(user_button[4] == 1) {
            col_repeat.d = 0;
            button_pressed.d = 4;
            state.d = state.USERIN_SHL;
          }
          if(user_button[5] == 1) {
            col_repeat.d = 0;
            button_pressed.d = 5;
            state.d = state.USERIN_SHL;
          }
        }

      state.USERIN_SHL:
        reg_wa = button_pressed.q * 3 + 1;          // user input
        //led_wa = 
        wdsel = 2b10;
        alufn = SHL;
        bdata = 1;
        bsel = 1;
        ra_address = button_pressed.q * 3 + 1;      // user input
        //rb_address = 
        state.d = state.USERIN_ADD;
      state.USERIN_ADD:
        reg_wa = button_pressed.q * 3 + 1;          // user input
        //led_wa = 
        wdsel = 2b10;
        alufn = ADD;
        bdata = 1;
        bsel = 1;
        ra_address = button_pressed.q * 3 + 1;      // user input
        //rb_address =
        state.d = state.USERIN_DISPLAY;
        
      state.ANIMATE_SHL:
        reg_wa = col_repeat.q * 3 + 1;              // user input
        //led_wa = 
        wdsel = 2b10;
        alufn = SHL;
        bdata = 1;
        bsel = 1;
        ra_address = col_repeat.q * 3 + 1;          // user input
        //rb_address = 
        if(col_repeat.q < 5) {
          col_repeat.d = col_repeat.q + 1;
        } else {
        col_repeat.d = 0;
        state.d = state.ANIMATE_ADD;
        }
      state.ANIMATE_ADD:
        reg_wa = col_repeat.q * 3 + 2;              // store
        //led_wa = 0;
        wdsel = 2b10;
        alufn = ADD;
        //bdata = 
        //bsel = 
        ra_address = col_repeat.q * 3;              // rng
        rb_address = col_repeat.q * 3 + 1;          // user input
        if(col_repeat.q < 5) {
          col_repeat.d = col_repeat.q + 1;
        } else {
        col_repeat.d = 0;
        state.d = state.COLLIDE;
        }
      
      state.COLLIDE:
        reg_wa = col_repeat.q + 18;                  // collision check
        //led_wa = 
        wdsel = 2b10;
        alufn = BOOL_AND;
        //bdata = 
        //bsel = 
        ra_address = col_repeat.q * 3;               // rng
        rb_address = col_repeat.q * 3 + 1;           // user input
        if(col_repeat.q < 5) {
          col_repeat.d = col_repeat.q + 1;
        } else {
        col_repeat.d = 0;
        state.d = state.COLLIDE_CHECK;
        }
        
      state.COLLIDE_CHECK:
        //reg_wa = 
        //led_wa = 
        wdsel = 2b00;
        alufn = ADD;
        bdata = 0;
        bsel = 1;
        ra_address = col_repeat.q + 18;              // collision check
        //rb_address = 1;
        if(col_repeat.q < 5) {
          col_repeat.d = col_repeat.q + 1;
          if(z == 1) {
            state.d = state.COLLIDE_CHECK;
          } else {
            if(col_repeat.q <= 2) player_ingame.d[0] = 0;
            if(col_repeat.q > 2) player_ingame.d[1] = 0;
          }
        } else{
          col_repeat.d = 0;
          timer.rst = 1;
          state.d = state.ANIMATE_DISPLAY;
        }
        
      state.ANIMATE_DISPLAY:
        //reg_wa = 
        led_wa = col_repeat.q;
        wdsel[1] = 0;
        if(col_repeat.q <= 2) wdsel[0] = 1 & player_ingame.q[0];
        else wdsel[0] = 1 & player_ingame.q[1];
        alufn = BOOL_B;
        //bdata = 
        //bsel = 
        //ra_address = 
        rb_address = col_repeat.q * 3 + 2;          // store
        
        if(col_repeat.q < 5) {
          col_repeat.d = col_repeat.q + 1;
        } else {
          if(timer.value >= 8b00000010){
            col_repeat.d = 0;
            if(animate.q == 4) {
              animate.d = 0;
              state.d = state.ANSWER_CHECK;
            } else {
              animate.d = animate.q + 1;
              state.d = state.ANIMATE_SHL;
        }}}
        
      state.ANSWER_CHECK:
        //reg_wa = 
        //led_wa = 
        wdsel = 2b00;
        alufn = SUB;
        bdata = 8b11100000;
        bsel = 1;
        ra_address = col_repeat.q * 3 + 2;        // store
        //rb_address = 
        
        if(col_repeat.q < 5) {
          col_repeat.d = col_repeat.q + 1;
          if(z != 1) {
            if(col_repeat.q <= 2) player_ingame.d[0] = 0;
            if(col_repeat.q > 2) player_ingame.d[1] = 0;
          }
        } else {
          col_repeat.d = 0;
          timer.rst = 1;
          state.d = state.LEVEL_CLEARED;
        }
        
      state.LEVEL_CLEARED:
        repeat.d = repeat.q + 1;
        
        if(player_ingame.q == 2b11) {
          if(repeat.q[0] == 0) {
            led_wa = col_repeat.q;
            wdsel = 2b01;
            alufn = BOOL_B;
            if(col_repeat.q <= 2) bdata = 8b11100000 & 8x{player_ingame.q[0]};
            else bdata = 8b11100000 & 8x{player_ingame.q[1]};
            bsel = 1;
            colour0 = Colour.GREEN & 24x{player_ingame.q[0]};
            colour1 = Colour.GREEN & 24x{player_ingame.q[1]};
          } 
          if(timer.value >= 8b1000) state.d = state.CLEAR;
        } else {
          level_reset = 1;
          led_wa = col_repeat.q;
          wdsel = 2b01;
          alufn = BOOL_B;
          case(player_ingame.q){
            2b00: 
              myScreen.screen = 8b110;
              colour0 = Colour.YELLOW;
              colour1 = Colour.YELLOW;
            2b01: 
              myScreen.screen = 8b1;
              colour0 = Colour.GREEN;
              colour1 = Colour.GREEN;
            2b10: 
              myScreen.screen = 8b10;
              colour0 = Colour.GREEN;
              colour1 = Colour.GREEN;
          }
          bdata = myScreen.out[col_repeat.q];
          bsel = 1;
          if(col_repeat.q < 5) {                                      // for any state that goes through all cols, this repeats the code till all cols have been passed through
            col_repeat.d = col_repeat.q + 1;
          } else col_repeat.d = 0;
          if(start_button == 1) {
            reset = 1;
            state.d = state.START_GAME;
          } 
        }
        
          

      state.CLEAR:            // clean reg_file and led_memory
        reset = 1;
        if(game_reset == 1) state.d = state.START_GAME;
        else state.d = state.LEVEL_UP;
        
      default: 
        reg_wa = 00;
        led_wa = 0;
        wdsel = 2b00;      // wdsel[0] refers to LED memory; wdsel[1] refers to reg_file
        alufn = 6b000000;
        ra_address = 2b00;
        rb_address = 2b00;
        bdata = 0;
        bsel = 0;
        reset = 1;
        if(start_button == 1) state.d = state.START_GAME;
  }
}
}