global Colour {
    // BGR
    const RED = h00DD00;
    const GREEN = h0000DD;
    const BLUE = hDD0000;
    const YELLOW = h008888;
    const WHITE = h888888;
    const BLACK = h000000;
}

module mojo_top (
        input clk,                  // 50MHz clock
        // input rst_n,
        output led [8],             // 8 user controllable LEDs
        output spi_miso,            // AVR SPI MISO
        output spi_channel [4],     // AVR general purpose pins (used by default to select ADC channel)
        output avr_rx,              // AVR RX (FPGA TX)
        output led_data[7],
        input user_button[6],
        input start_button[1],
        output io_led [3][8],   // LEDs on IO Shield
        output io_seg [8],      // 7-segment LEDs on IO Shield
        output io_sel [4],      // Digit select on IO Shield
        input io_button [5],    // 5 buttons on IO Shield
        input io_dip [3][8]     // DIP switches on IO Shield
    ) {
  
    sig rst;    // reset signal
    alu myALU;
    reg_file myReg;
    // led_matrix and init_blk are hardcoded, 
    // need to change if these constants change
    const ROWS = 8;
    const COLS = 6;

    .clk(clk) {
        control myCtl;
        button_conditioner user_cond[5];
        edge_detector user_edge[5] (#RISE(1), #FALL(0));
        button_conditioner start_cond[1];
        edge_detector start_edge[1] (#RISE(1), #FALL(0));
        edge_detector level_edge[1] (#RISE(1), #FALL(0));

        .rst(rst){
        counter timer (#SIZE(8), #DIV(25));
        led_memory myLED;
        led_memory levelLED;
        }
        dff colour[24];
        dff level[4];
    }

    always {
        led = 8h00;                 // turn LEDs off
        spi_miso = bz;              // not using SPI
        spi_channel = bzzzz;        // not using flags
        avr_rx = bz;                // not using serial port
        io_led = 3x{{8h00}};    // turn LEDs off
        io_seg = 8hff;          // turn segments off
        io_sel = 4hf;           // select no digits
        
        level_edge.in = myCtl.level_up;
        if(level_edge.out == 1) level.d = level.q + 1;
    
        user_edge.in = user_cond.out;
        user_cond.in = io_button;    // TOCHANGE
        start_edge.in = start_cond.out;
        start_cond.in = io_button[1];      // TOCHANGE
    
        // init myALU
        myALU.alufn = myCtl.alufn;
        myALU.a = myReg.ra_data;
        myALU.b = myReg.rb_data;
        myALU.bdata = myCtl.bdata;
        myALU.bsel = myCtl.bsel;
    
        // init myReg
        myReg.clk = clk;
        myReg.wdsel = myCtl.wdsel[1];
        myReg.wa = myCtl.reg_wa;
        myReg.ra_address = myCtl.ra_address;
        myReg.rb_address = myCtl.rb_address;
        myReg.reset = myCtl.reset;
        myReg.wd = myALU.out;
        
        // init myCtl
        myCtl.user_button[0] = user_edge.out[0];
        myCtl.user_button[3:1] = user_edge.out[4:2];
        myCtl.start_button = start_edge.out;
        myCtl.z = myALU.z;
        myCtl.level = level.q;
        myCtl.game_reset = io_dip[0][0];
    
        // init myLED
        myLED.wdsel = myCtl.wdsel[0];
        myLED.wa = myCtl.led_wa;
        myLED.wd = myALU.out;
        myLED.reset = myCtl.reset;
        myLED.colour0 = myCtl.colour0;
        myLED.colour1 = myCtl.colour1;
        
        // init levelLED
        levelLED.wdsel = 1;
        levelLED.wa = 0;
        levelLED.wd = level.q;
        levelLED.reset = myCtl.level_reset;
        levelLED.colour0 = Colour.YELLOW;
        levelLED.colour1 = Colour.YELLOW;
    
        // output pins
        led_data[3] = levelLED.led_out[0];
        led_data[2:0] = myLED.led_out[2:0];
        led_data[6:4] = myLED.led_out[5:3];
    
        io_led[0] = myCtl.test;
        io_led[2] = io_button;
    /*    
        io_led[0] = myALU.out;
        io_led[1] = myReg.ra_data;
        io_led[2] = myCtl.bdata;
    
        io_led[0] = myLED.led_out[0];
        io_led[1] = myLED.led_out[1];
        io_led[2] = myCtl.test;//myLED.led_out[2];*/
  }
}